AWSTemplateFormatVersion: '2010-09-09'
Description: 'stack: {{stackName}} | deployed by Kes'
Parameters:
  CmrPassword:
    Type: String
    Description: 'Password used to publish CMR records. This is encrypted by Custom::Cumulus'
    NoEcho: true
  DockerPassword:
    Type: String
    Description: 'Password used to access a private docker repository (not required)'
    Default: NoValue
    NoEcho: true
  DockerEmail:
    Type: String
    Description: 'Email used to login to a private docker repository (not required)'
    Default: NoValue
    NoEcho: true

Resources:

  #################################################
  #  BEGIN
  #################################################
{{#each nested_templates}}
{{#ifEquals @key "WorkflowLambdaVersions"}}
{{#ifEquals ../useWorkflowLambdaVersions true}}
  {{@key}}NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
      {{#each ../workflowLambdas}}
        {{@key}}LambdaFunction:
          !Ref {{@key}}LambdaFunction
      {{/each}}
      TemplateURL: {{this.url}}
{{/ifEquals}}
{{/ifEquals}}
{{#ifNotEquals @key "WorkflowLambdaVersions"}}
  {{@key}}NestedStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        CmrPassword:
          Fn::GetAtt:
            - CumulusCustomResource
            - CmrPassword
      {{#if ../es.name}}
        ElasticSearchDomain:
          Fn::GetAtt:
            - {{../es.name}}Domain
            - DomainEndpoint
      {{/if}}
        log2elasticsearchLambdaFunction:
          Fn::GetAtt:
            - log2elasticsearchLambdaFunction
            - Arn
        ScheduleSFLambdaFunction:
          Fn::GetAtt:
            - ScheduleSFLambdaFunction
            - Arn
        dbIndexerLambdaFunction:
          Fn::GetAtt:
            - dbIndexerLambdaFunction
            - Arn
        kinesisConsumerLambdaFunction:
          Fn::GetAtt:
            - kinesisConsumerLambdaFunction
            - Arn
        CreateReconciliationReportLambdaFunction:
          Fn::GetAtt:
            - CreateReconciliationReportLambdaFunction
            - Arn
        BulkDeleteLambdaFunction:
          Fn::GetAtt:
            - BulkDeleteLambdaFunction
            - Arn
        EcsCluster: !Ref CumulusECSCluster
        AsyncOperationTaskDefinition: !Ref AsyncOperationTaskDefinition
      {{#each ../apis}}
        {{name}}RestApi:
          Ref: {{name}}RestApi
        {{name}}RestApiRootId:
          Fn::GetAtt:
            - {{name}}RestApi
            - RootResourceId
      {{/each}}
      {{# each ../dynamos}}
        {{@key}}DynamoDB:
          Ref: {{@key}}DynamoDB
      {{/each}}
      {{# each ../dynamos}}
        {{@key}}DynamoDBStreamArn:
          Fn::GetAtt:
            - {{@key}}DynamoDB
            - StreamArn
      {{/each}}
      {{# if ../vpc }}
        SecurityGroupId:
          Fn::GetAtt:
            - SecurityGroup
            - GroupId
      {{/if}}
      TemplateURL: {{this.url}}
{{/ifNotEquals}}
{{/each}}

  #################################################
  # Nested CloudFormation Templates config BEGIN
  #################################################

  #################################################
  # Cumulus Custom Resource BEGIN
  #################################################
  CumulusCustomResource:
    Type: Custom::Cumulus
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomBootstrapLambdaFunction
          - Arn
      Cmr:
        Password:
          Ref: CmrPassword
    {{# if es.name}}
      ElasticSearch:
        host:
          Fn::GetAtt:
            - {{es.name}}Domain
            - DomainEndpoint
        version: {{es.elasticSearchMapping}}
    {{/if}}
    {{# if dynamos}}
      DynamoDBTables:
      {{#each dynamos}}
        - name:
            Ref: {{@key}}DynamoDB
          pointInTime: {{this.pointInTime}}
      {{/each}}
    {{/if}}
      Users:
        table:
          Ref: UsersTableDynamoDB
        records:
        {{# each default_users}}
          {{# if this }}
          - username: {{@key}}
            password: OAuth
          {{/if}}
        {{/each}}
        {{# each users}}
          - username: {{username}}
            password: OAuth
        {{/each}}

  #################################################
  # Cumulus Custom Resource END
  #################################################

  #################################################
  # Cumulus DynamoDB Auto Scaling START
  #################################################

{{# each dynamos}}
  {{#with (lookup ../this @key)}}
  {{#if this.enableAutoScaling}}
  ### Read scaling policy
  {{@key}}ReadCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
    {{#if this.ReadMinCapacity}}
      MinCapacity: {{ this.ReadMinCapacity }}
    {{else}}
      MinCapacity: 5
    {{/if}}
    {{#if this.ReadMaxCapacity}}
      MaxCapacity: {{ this.ReadMaxCapacity }}
    {{else}}
      MaxCapacity: 10
    {{/if}}
      ResourceId:
        Fn::Sub: table/{{../../stackName}}-{{@key}}
      RoleARN: {{../../this.iams.scalingRoleArn}}
      ScalableDimension: "dynamodb:table:ReadCapacityUnits"
      ServiceNamespace: dynamodb
  {{@key}}TableReadScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: {{@key}}ReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: {{ ../../this.AutoScalingPolicyConfiguration.targetValue }}
        ScaleInCooldown: {{ ../../this.AutoScalingPolicyConfiguration.scaleInCooldown }}
        ScaleOutCooldown: {{ ../../this.AutoScalingPolicyConfiguration.scaleOutCooldown }}
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization

  ### Write scaling policy
  {{@key}}WriteCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
    {{#if this.WriteMinCapacity}}
      MinCapacity: {{ this.WriteMinCapacity }}
    {{else}}
      MinCapacity: 1
    {{/if}}
    {{#if this.WriteMaxCapacity}}
      MaxCapacity: {{ this.WriteMaxCapacity }}
    {{else}}
      MaxCapacity: 2
    {{/if}}
      ResourceId:
        Fn::Sub: table/{{../../stackName}}-{{@key}}
      RoleARN: {{../../this.iams.scalingRoleArn}}
      ScalableDimension: "dynamodb:table:WriteCapacityUnits"
      ServiceNamespace: dynamodb
  {{@key}}TableWriteScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: {{@key}}WriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: {{ ../../this.AutoScalingPolicyConfiguration.targetValue }}
        ScaleInCooldown: {{ ../../this.AutoScalingPolicyConfiguration.scaleInCooldown }}
        ScaleOutCooldown: {{ ../../this.AutoScalingPolicyConfiguration.scaleOutCooldown }}
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  {{/if}}
  {{/with}}
{{/each}}

  #################################################
  # Cumulus DynamoDB Auto Scaling END
  #################################################

  #################################################

  # SNS config BEGIN
  #################################################
{{#each sns}}
  {{#if this.arn}}
  {{#each this.subscriptions}}
  # Subscriptions only
  {{@../key}}{{@key}}Subscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      {{# if this.endpoint.function}}
      Endpoint:
        {{this.endpoint.function}}:
        {{#each this.endpoint.array}}
          - {{@this}}
        {{/each}}
      {{else}}
      Endpoint: {{this.endpoint}}
      {{/if}}
      Protocol: {{this.protocol}}
      TopicArn: {{../this.arn}}
  {{/each}}
  {{else}}
  {{@key}}Sns:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: {{../stackName}}-{{@key}}
      Subscription:
      {{#each this.subscriptions}}
        {{# if this.endpoint.function}}
        - Endpoint:
            {{this.endpoint.function}}:
            {{#each this.endpoint.array}}
              - {{@this}}
            {{/each}}
        {{else}}
        - Endpoint: {{this.endpoint}}
        {{/if}}
          Protocol: {{this.protocol}}
      {{/each}}
  {{/if}}

  {{# each this.subscriptions}}
  {{@../key}}{{@key}}SubscriptionPermission:
    Type: AWS::Lambda::Permission
    Properties:
    {{# if this.endpoint.function}}
      FunctionName:
        {{this.endpoint.function}}:
        {{#each this.endpoint.array}}
          - {{@this}}
        {{/each}}
    {{else}}
      FunctionName: {{this.endpoint}}
    {{/if}}
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        {{#if ../this.arn}}
        {{../this.arn}}
        {{else}}
        Ref: {{@../key}}Sns
        {{/if}}
  {{/each}}

{{/each}}
  #################################################
  # SNS config END
  #################################################

  #################################################
  # Step Functions config BEGIN
  #################################################
{{#each activities}}
  {{name}}Activity:
    Type: AWS::StepFunctions::Activity
    Properties:
      Name: {{../stackName}}-{{name}}-Activity
{{/each}}

{{#each stepFunctions}}
  {{../stackNameNoDash}}{{@key}}StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
    {{#ifEquals ../useWorkflowLambdaVersions true}}
        Fn::Sub:
        - |
            {{{ToJson this}}}
        - { {{#each ../workflowLambdas}}{{@key}}LambdaAliasOutput: !GetAtt [WorkflowLambdaVersionsNestedStack, Outputs.{{@key}}LambdaAliasOutput],{{/each}} stackName: {{../stackName}} }
    {{/ifEquals}}
    {{#ifNotEquals ../useWorkflowLambdaVersions true}}
        Fn::Sub: |
          {{{ToJson this}}}
    {{/ifNotEquals}}
      RoleArn: {{../iams.stepRoleArn}}

{{/each}}
  #################################################
  # Step Functions config END
  #################################################

{{# if es.name}}
  #################################################
  # ElasticSearch config BEGIN
  #################################################
  {{es.name}}Domain:
    Type: "AWS::Elasticsearch::Domain"
    Properties:
      DomainName: {{stackName}}-{{es.name}}
      ElasticsearchVersion: {{# if version}}{{es.version}}{{ else }}5.3{{/if}}
      ElasticsearchClusterConfig:
        InstanceCount: {{# if instanceCount}}{{es.instanceCount}}{{ else }}'1'{{/if}}
        InstanceType: {{# if instanceType}}{{es.instanceType}}{{ else }}"t2.small.elasticsearch"{{/if}}
      SnapshotOptions:
        AutomatedSnapshotStartHour: "0"
      EBSOptions:
        EBSEnabled: true
        VolumeType: gp2
        VolumeSize: {{es.volumeSize}}
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: "true"
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: {{iams.lambdaProcessingRoleArn}}
            Action: "es:*"
            Resource:
              - Fn::Sub: "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/{{stackName}}-{{es.name}}/*"
          - Effect: "Allow"
            Principal:
              AWS: {{iams.lambdaApiGatewayRoleArn}}
            Action: "es:*"
            Resource:
              - Fn::Sub: "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/{{stackName}}-{{es.name}}/*"


  #################################################
  # ElasticSearch config END
  #################################################
{{/if}}

  #################################################
  # SQS config BEGIN
  #################################################
{{#each sqs}}
  {{@key}}SQS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: {{../stackName}}-{{@key}}
      ReceiveMessageWaitTimeSeconds: 20
    {{#if this.retry}}
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - {{@key}}FailedSQS
            - Arn
        maxReceiveCount: {{this.retry}}
    {{/if}}
      VisibilityTimeout: {{this.visibilityTimeout}}

{{#if this.retry}}
  {{@key}}FailedSQS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: {{../stackName}}-{{@key}}-failed

{{/if}}

{{# each this.consumer }}
  {{@../key}}WatcherRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: {{this.schedule}}
      State: {{# if this.state}}{{this.state}}{{ else }}DISABLED{{/if}}
      Targets:
        - Id: {{@../key}}WatcherScheduler
          Input:
            Fn::Sub: '{"queueUrl": "${ {{@../key}}SQS}", "messageLimit": {{this.messageLimit}} }'
          Arn:
            Fn::GetAtt:
            - {{this.lambda}}LambdaFunction
            - Arn

  {{@../key}}InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - {{this.lambda}}LambdaFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - {{@../key}}WatcherRule
          - Arn

{{/each}}
{{/each}}
  #################################################
  # SQS config END
  #################################################

  #################################################
  # CloudWatch RULE config BEGIN
  #################################################

{{# each rules }}
  {{@key}}Rule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: {{this.schedule}}
      State: {{# if this.state}}{{this.state}}{{ else }}DISABLED{{/if}}
      Targets:
        {{# each this.targets}}
        - Id: {{@../key}}WatcherScheduler
          {{# if input}}
          Input: {{input}}
          {{/if}}
          Arn:
            Fn::GetAtt:
            - {{lambda}}LambdaFunction
            - Arn
        {{/each}}

  {{# each targets}}
  {{@../key}}RuleLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - {{lambda}}LambdaFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - {{@../key}}Rule
          - Arn
  {{/each}}
{{/each}}

## Generic lambda permission for custom rules
## created in the dashboard
  GenericLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - ScheduleSFLambdaFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com

  #################################################
  # CloudWatch RULE config BEGIN
  #################################################

  #################################################
  # DynamoDB config BEGIN
  #################################################
{{#each dynamos}}
  {{@key}}DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
    {{#each this.attributes}}
      - AttributeName: {{name}}
        AttributeType: {{type}}
    {{/each}}
      KeySchema:
    {{#each this.attributes}}
      - AttributeName: {{name}}
        KeyType: {{schema}}
    {{/each}}
      ProvisionedThroughput:
        ReadCapacityUnits: {{this.read}}
        WriteCapacityUnits: {{this.write}}
      TableName: {{../stackName}}-{{@key}}
      StreamSpecification:
        StreamViewType: "NEW_AND_OLD_IMAGES"

{{/each}}

  #################################################
  # DynamoDB config END
  #################################################

  #################################################
  # APIGateway config BEGIN
  #################################################
{{# if apiMethods}}

{{#each apiMethods}}
  {{name}}:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId:
        Ref: {{resource}}
      RestApiId:
        Ref: {{api}}RestApi
      HttpMethod: {{method}}
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - {{lambda}}LambdaFunction
              - Arn
            - /invocations

{{/each}}

{{#each apiMethodsOptions}}
  {{name}}:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,POST,GET,DELETE'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
          StatusCode: '200'
        RequestTemplates:
          application/json: '{statusCode:200}'
        Type: MOCK
      MethodResponses:
      - ResponseModels: {}
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
        StatusCode: '200'
      RequestParameters:
        method.request.header.Authorization: true
      ResourceId:
        Ref: {{resource}}
      RestApiId:
        Ref: {{api}}RestApi

{{/each}}

{{#each apiResources}}
  {{name}}:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
      {{#each parents}}
        {{this}}
      {{/each}}
      PathPart: '{{pathPart}}'
      RestApiId:
        Ref: {{api}}RestApi

{{/each}}
{{/if}}

{{#each apis}}
  {{name}}RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: {{../stackName}}-{{name}}
{{/each}}

  #################################################
  # APIGateway config END
  #################################################

  #################################################
  # Lambda config BEGIN
  #################################################
{{#each lambdas}}
  {{@key}}LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: {{this.bucket}}
        S3Key: {{this.remote}}
      FunctionName: {{../stackName}}-{{@key}}
      Environment:
        Variables:
          stackName: {{../stackName}}
        {{#if this.useElasticSearch }}
          ES_HOST:
            Fn::GetAtt:
              - {{../es.name}}Domain
              - DomainEndpoint
        {{/if}}
    {{#each this.envs}}
      {{# if this.function}}
        {{#if this.array}}
          {{@key}}:
            {{this.function}}:
            {{#each this.array}}
              - {{this}}
            {{/each}}
        {{/if}}
        {{#if this.value}}
          {{@key}}:
            {{this.function}}: {{this.value}}
        {{/if}}
      {{else}}
          {{@key}}: {{{this}}}
      {{/if}}
    {{/each}}
      {{# if this.urs}}
        {{# if ../api_backend_url}}
          API_ENDPOINT: {{../api_backend_url}}token
        {{else}}
          API_ENDPOINT:
            Fn::Join: ["", [ "https://", {"Ref": "backendRestApi"}, ".execute-api.", {"Fn::Sub": "${AWS::Region}"}, ".amazonaws.com/{{../apiStage}}/token"]]
        {{/if}}
        {{# if ../api_distribution_url}}
          DEPLOYMENT_ENDPOINT: {{../api_distribution_url}}redirect
        {{else}}
          DEPLOYMENT_ENDPOINT:
            Fn::Join: ["", [ "https://", {"Ref": "downloadRestApi"}, ".execute-api.", {"Fn::Sub": "${AWS::Region}"}, ".amazonaws.com/{{../apiStage}}/redirect"]]
        {{/if}}
      {{/if}}
      Handler: {{this.handler}}
      MemorySize: {{this.memory}}
{{# if this.apiRole }}
      Role: {{../iams.lambdaApiGatewayRoleArn}}
{{else if this.distributionRole}}
      Role: {{../iams.distributionRoleArn}}
{{else}}
      Role: {{../iams.lambdaProcessingRoleArn}}
{{/if}}
      Runtime: {{# if this.runtime}}{{this.runtime}}{{else}}nodejs8.10{{/if}}
      Timeout: {{this.timeout}}
    {{# if this.deadletterqueue}}
      DeadLetterConfig:
        TargetArn:
          Fn::GetAtt:
            - {{this.deadletterqueue}}SQS
            - Arn
    {{/if}}
      Tags:
        - Key: Project
          Value: {{../stackName}}

  {{# if this.launchInVpc }}
    {{# if ../vpc }}
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
            - SecurityGroup
            - GroupId
        SubnetIds:
        {{#each ../vpc.subnets}}
          - {{this}}
        {{/each}}
    {{/if}}
  {{/if}}

{{# if this.apiGateway }}
  {{@key}}LambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - {{@key}}LambdaFunction
        - Arn
      Principal: apigateway.amazonaws.com
{{/if}}

{{# if this.logToElasticSearch }}
  {{@key}}LogSubscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - {{@key}}LogGroup
      - log2elasticsearchLambdaPermissionLog
    Properties:
      DestinationArn:
        Fn::GetAtt:
          - log2elasticsearchLambdaFunction
          - Arn
      LogGroupName: '/aws/lambda/{{../stackName}}-{{@key}}'
      FilterPattern: ""

  {{@key}}LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/lambda/{{../stackName}}-{{@key}}'
      RetentionInDays: 30
{{/if}}
{{/each}}

  log2elasticsearchLambdaPermissionLog:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - log2elasticsearchLambdaFunction
        - Arn
      Principal:
        Fn::Sub: 'logs.${AWS::Region}.amazonaws.com'

  #################################################
  # Lambda config END
  #################################################

  #################################################
  # ECS config BEGIN
  #################################################
{{# if vpc }}
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS containter instances of {{stackName}}
      Tags:
        - Key: Name
          Value: "{{stackName}}"
      VpcId: {{vpc.vpcId}}

  {{#if ecs.ssh}}
  SecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: 'SecurityGroup'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0
  {{/if}}
{{/if}}

{{# if iams.instanceProfile}}
  CumulusECSCluster:
    Type: AWS::ECS::Cluster

  CumulusContainerInstanceLaunch:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          MountConfig:
          - config
          {{# if ecs.efs.mount }}
          - mount
          {{/if}}

        config:
          commands:
            01_add_instance_to_cluster:
              command:
                Fn::Sub:
                  - |
                    #!/bin/bash
                    echo ECS_CLUSTER=${CumulusECSCluster} >> /etc/ecs/ecs.config
                    echo ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=1m >> /etc/ecs/ecs.config

                {{#if ecs.docker}}
                    echo ECS_ENGINE_AUTH_TYPE=docker >> /etc/ecs/ecs.config
                    echo 'ECS_ENGINE_AUTH_DATA={"https://index.docker.io/v1/":{"username":"{{ecs.docker.username}}","password": "${Password}","email":"${Email}"}}' >> /etc/ecs/ecs.config
                    echo 'DOCKER_STORAGE_OPTIONS="${!DOCKER_STORAGE_OPTIONS} --storage-driver {{ecs.docker.storageDriver}}"' >> /etc/sysconfig/docker-storage
                    {{#ifEquals ecs.docker.storageDriver "devicemapper"}}
                    echo 'OPTIONS="${!OPTIONS} --storage-opt dm.basesize={{ecs.volumeSize}}G"' >> /etc/sysconfig/docker
                    {{/ifEquals}}

                  - Password:
                      Ref: DockerPassword
                    Email:
                      Ref: DockerEmail
                {{else}}
                  - Example: value
                {{/if}}

          {{# if ecs.efs.mount }}
          packages:
            yum:
              nfs-utils: []
          {{/if}}

          files:
            "/etc/cfn/cfn-hup.conf":
              content:
                Fn::Sub: |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content:
                Fn::Sub: |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.CumulusContainerInstanceLaunch.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource CumulusContainerInstanceLaunch --region ${AWS::Region}
                  runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"

        {{# if ecs.efs.mount}}
        mount:
          commands:
            01_mount:
              command:
                Fn::Sub:
                  - |
                    #!/bin/bash -xe

                    mkdir -p {{ecs.efs.mount}}
                    mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${EFSFileSystemId}.efs.${AWS::Region}.amazonaws.com:/ {{ecs.efs.mount}}
                    chmod 777 {{ecs.efs.mount}}

                    echo '${EFSFileSystemId}.efs.${AWS::Region}.amazonaws.com:/ {{ecs.efs.mount}} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0' | tee -a /etc/fstab
                    mount -a
                    service docker restart
                    start ecs

                  - EFSFileSystemId:
                      Fn::ImportValue:
                        Fn::Sub: "{{prefix}}-EFSFileSystemId"
        {{/if}}

    Properties:
    {{# if vpc.subnets }}
      AssociatePublicIpAddress: {{#if ecs.publicIp}}{{ecs.publicIp}}{{else}}false{{/if}}
    {{/if}}
      SecurityGroups:
        - Fn::GetAtt:
          - SecurityGroup
          - GroupId
       {{# if ecs.efs.mount}}
        - Fn::ImportValue:
            "{{prefix}}-EFSSecurityGroup"
        {{/if}}

      ImageId: {{ecs.amiid}}

      InstanceType: {{ecs.instanceType}}
      IamInstanceProfile: {{iams.instanceProfile}}
      BlockDeviceMappings:
      - DeviceName: "/dev/xvdcz"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: {{ecs.volumeSize}}
    {{# if ecs.keyPairName }}
      KeyName: {{ ecs.keyPairName }}
    {{/if}}
      UserData:
        "Fn::Base64":
          Fn::Join:
            - ""
            - - "#cloud-boothook\n"
              - "\n"
              - "yum install -y aws-cfn-bootstrap\n"
              - Fn::Sub: "/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource CumulusContainerInstanceLaunch --region ${AWS::Region} -c MountConfig\n"
              - Fn::Sub: "/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource CumulusECSAutoScalingGroup --region ${AWS::Region}"

  CumulusECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
    Properties:
      AvailabilityZones:
{{# if ecs.availabilityZones }}
  {{#each ecs.availabilityZones}}
        - {{this}}
  {{/each}}
{{else if ecs.availabilityZone }}
        - {{ecs.availabilityZone}}
{{/if}}
    {{# if vpc.subnets }}
      VPCZoneIdentifier:
      {{#each vpc.subnets}}
        - {{this}}
      {{/each}}
    {{/if}}
      LaunchConfigurationName:
        Ref: CumulusContainerInstanceLaunch
      MinSize: '0'
      MaxSize: {{ ecs.maxInstances }}
      DesiredCapacity: {{ ecs.desiredInstances }}
      Tags:
      - Key: Name
        Value: "{{stackName}}-cumulus-ecs"
        PropagateAtLaunch: true

{{#each ecs.services}}
  # adding TaskDefinition for Lambda/ECS services
  {{@key}}TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
    {{# if this.volumes}}
      Volumes:
      {{# each this.volumes}}
        - Name: {{name}}
          Host:
            SourcePath: {{path}}
      {{/each}}
    {{/if}}
    {{# if this.networkMode}}
      NetworkMode: {{this.networkMode}}
    {{/if}}
      ContainerDefinitions:
      - Name: {{@key}}
        Cpu: {{#if this.cpu }}{{ this.cpu }}{{ else }}10{{/if}}
        Essential: true
      {{# if this.volumes}}
        MountPoints:
        {{# each this.volumes}}
          - SourceVolume: {{name}}
            ContainerPath: {{dst}}
        {{/each}}

      {{/if}}
      {{# if this.privileged }}
        Privileged: true
      {{/if}}

        Environment:
    {{#each this.envs}}
      {{# if this.function}}
        {{#if this.array}}
          - Name: {{@key}}
            Value:
              {{this.function}}:
              {{#each this.array}}
                - {{this}}
              {{/each}}
        {{/if}}
        {{#if this.value}}
          - Name: {{@key}}
            Value:
              {{this.function}}: {{this.value}}
        {{/if}}
      {{else}}
          - Name: {{@key}}
            Value: {{{this}}}
      {{/if}}
    {{/each}}
      {{# if ../ecs.docker}}
        Image: {{image}}
      {{else}}
        Image:
          Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/{{image}}
      {{/if}}
        MemoryReservation: {{#if this.memory }}{{ this.memory }}{{ else }}256{{/if}}
    {{# if this.commands }}
        Command:
      {{# each this.commands }}
        {{# if this.function}}
          - {{this.function}}: {{this.value}}
        {{else}}
          - {{{ @this }}}
        {{/if}}
      {{/each}}
    {{/if}}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: {{@key}}EcsLogs
            awslogs-region:
              Fn::Sub: ${AWS::Region}

  {{@key}}EcsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: {{../stackName}}-{{@key}}EcsLogs

  {{@key}}EcsLogSubscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - {{@key}}EcsLogs
      - log2elasticsearchLambdaPermissionLog
    Properties:
      DestinationArn:
        Fn::GetAtt:
          - log2elasticsearchLambdaFunction
          - Arn
      LogGroupName: {{../stackName}}-{{@key}}EcsLogs
      FilterPattern: ""

  {{@key}}ECSService:
    Type: AWS::ECS::Service
    DependsOn:
    - CumulusECSAutoScalingGroup
    Properties:
      Cluster:
        Ref: CumulusECSCluster
      DesiredCount: {{# if this.count}}{{this.count}}{{ else }} 0 {{/if}}
      TaskDefinition:
        Ref: {{@key}}TaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

{{/each}}

{{#each ecs.tasks}}
  # adding TaskDefinition for Lambda/ECS tasks
  {{@key}}TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
    {{# if this.volumes}}
      Volumes:
      {{# each this.volumes}}
        - Name: {{name}}
          Host:
            SourcePath: {{path}}
      {{/each}}
    {{/if}}
    {{# if this.networkMode}}
      NetworkMode: {{this.networkMode}}
    {{/if}}
      ContainerDefinitions:
      - Name: {{@key}}
        Cpu: {{#if this.cpu }}{{ this.cpu }}{{ else }}10{{/if}}
        Essential: true
      {{# if this.volumes}}
        MountPoints:
        {{# each this.volumes}}
          - SourceVolume: {{name}}
            ContainerPath: {{dst}}
        {{/each}}

      {{/if}}
      {{# if this.privileged }}
        Privileged: true
      {{/if}}

        Environment:
    {{#each this.envs}}
      {{# if this.function}}
        {{#if this.array}}
          - Name: {{@key}}
            Value:
              {{this.function}}:
              {{#each this.array}}
                - {{this}}
              {{/each}}
        {{/if}}
        {{#if this.value}}
          - Name: {{@key}}
            Value:
              {{this.function}}: {{this.value}}
        {{/if}}
      {{else}}
          - Name: {{@key}}
            Value: {{{this}}}
      {{/if}}
    {{/each}}
      {{# if ../ecs.docker}}
        Image: {{image}}
      {{else}}
        Image:
          Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/{{image}}
      {{/if}}
        MemoryReservation: {{#if this.memory }}{{ this.memory }}{{ else }}256{{/if}}
    {{# if this.commands }}
        Command:
      {{# each this.commands }}
        {{# if this.function}}
          - {{this.function}}: {{this.value}}
        {{else}}
          - {{{ @this }}}
        {{/if}}
      {{/each}}
    {{/if}}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: {{@key}}EcsLogs
            awslogs-region:
              Fn::Sub: ${AWS::Region}

  {{@key}}EcsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: {{../stackName}}-{{@key}}EcsLogs

  {{@key}}EcsLogSubscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - {{@key}}EcsLogs
      - log2elasticsearchLambdaPermissionLog
    Properties:
      DestinationArn:
        Fn::GetAtt:
          - log2elasticsearchLambdaFunction
          - Arn
      LogGroupName: {{../stackName}}-{{@key}}EcsLogs
      FilterPattern: ""
{{/each}}
{{/if}}
  #################################################
  # ECS config END
  #################################################

Outputs:

  Api:
  {{# if api_backend_url}}
    Value: {{api_backend_url}}
  {{else}}
    Value:
      Fn::Join: ["", [ "https://", {"Ref": "backendRestApi"}, ".execute-api.", {"Fn::Sub": "${AWS::Region}"}, ".amazonaws.com/{{apiStage}}/"]]
      {{/if}}

  Distribution:
  {{# if api_distribution_url}}
    Value: {{api_distribution_url}}
  {{else}}
    Value:
      Fn::Join: ["", [ "https://", {"Ref": "downloadRestApi"}, ".execute-api.", {"Fn::Sub": "${AWS::Region}"}, ".amazonaws.com/{{apiStage}}/"]]
  {{/if}}

  ApiId:
    Value:
      Ref: backendRestApi

  DistributionId:
    Value:
      Ref: downloadRestApi

  ApiStage:
    Value: {{apiStage}}

{{#each stepFunctions}}
  {{@key}}StateMachine:
    Value:
      Ref: {{../stackNameNoDash}}{{@key}}StateMachine
{{/each}}

{{#each sqs}}
  {{@key}}SQSOutput:
    Value:
      Ref: {{@key}}SQS
{{/each}}

{{# if es.name}}
  {{es.name}}Domain:
    Value:
      Fn::GetAtt:
        - {{es.name}}Domain
        - DomainEndpoint
{{/if}}

{{#each sns}}
  {{#if this.arn}}
  {{@key}}:
    Value: {{this.arn}}
  {{else}}
  {{@key}}SnsArn:
    Value:
      Ref: {{@key}}Sns
  {{/if}}
{{/each}}

  EncryptedCmrPassword:
    Value:
      Fn::GetAtt:
        - CumulusCustomResource
        - CmrPassword

{{#if vpc}}
  EcsSecurityGroup:
    Description: ECS security group
    Value:
      Ref: SecurityGroup
    Export:
      Name:
        Fn::Sub: "{{stackName}}-EcsSecurityGroup"
{{/if}}
